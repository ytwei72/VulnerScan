package com.dky.vulnerscan.module;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.dky.vulnerscan.entity.*;
import com.dky.vulnerscan.entityview.ExploitVerifyParam;
import com.dky.vulnerscan.service.TaskResultService;
import com.dky.vulnerscan.util.Constant;
import com.dky.vulnerscan.util.JsonUtil;
import com.dky.vulnerscan.util.LogUtil;
import com.dky.vulnerscan.web.listener.StartMsfRpcListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.ArrayList;

@Component("ExploitScanModule")
public class ExploitScanModule {
    @Autowired
    private TaskResultService taskResultService;
    private boolean isRunningExploitScan = false;
    private boolean isRunningExploitVertify = false;
    private boolean hasReceivedParam = false;
    private ExploitVerifyParam exploitVerifyParam;//记录每次返回给前端的参数
    private ExploitScanErrorThread exploitScanErrorThread = null;

    public void setExploitVerifyParam(ExploitVerifyParam exploitVerifyParam) {
        this.exploitVerifyParam = exploitVerifyParam;
    }

    public boolean isRunningExploitScan() {
        return isRunningExploitScan;
    }

    public boolean isRunningExploitVertify() {
        return isRunningExploitVertify;
    }

    public boolean isHasReceivedParam() {
        return hasReceivedParam;
    }

    public synchronized void setExploitScanErrorThread(ExploitScanErrorThread exploitScanErrorThread) {
        this.exploitScanErrorThread = exploitScanErrorThread;
    }

    //exploit进行漏洞扫描
    public int exploitDeepScan(int projectID, int taskID, String ip) {
        String ipJson = taskResultService.getIpInfo(projectID, taskID, ip);
        JSONObject jsonObject = JSONObject.parseObject(ipJson);
        //设置品牌为空的不能验证
        if(jsonObject.getJSONObject("device_info_summary").getJSONArray("device_info_list").getJSONObject(0).getString("brand").equals("")){
            return Constant.SUCCESS;
        }
        try {
            if (hasReceivedParam) {
                stopLastExploitVerify(projectID, taskID, ip, "");
            }
            if (isRunningExploitScan || isRunningExploitVertify || (StartMsfRpcListener.getBw() == null)) {
                return Constant.FAIL;
            }

            //开启一个捕获错误流线程之前，先关闭上一个错误处理线程
            if (exploitScanErrorThread != null && exploitScanErrorThread.isAlive()) {
                exploitScanErrorThread.setExit(true);
            }
            exploitScanErrorThread = new ExploitScanErrorThread(projectID, taskID, ip);
            exploitScanErrorThread.start();

            isRunningExploitScan = true;
            LogUtil.deepScanLog("explot:" + projectID + ":" + taskID + ":" + ip + ":" + "@ipjson" + ipJson + "\n");
            StartMsfRpcListener.getBw().write("@ipjson" + ipJson + "\n");
            StartMsfRpcListener.getBw().flush();
            new ExploitScanThread(projectID, taskID, ip, "").start();
        } catch (IOException e) {
            e.printStackTrace();
            isRunningExploitScan = false;
            return Constant.FAIL;
        }
        return Constant.SUCCESS;
    }

    //写入漏洞名称获取exploit的验证参数
    public int writeVertifyVulName(int projectID, int taskID, String ip, String vulName) {
        if (hasReceivedParam) {
            stopLastExploitVerify(projectID, taskID, ip, vulName);
        } else {
            if (isRunningExploitScan()) {
                return Constant.FAIL;
            }
        }
        try {
            isRunningExploitVertify = true;
            hasReceivedParam = true;
            LogUtil.deepScanLog("@verify{\"" + ip + "\":\"" + vulName + "\"}" + "\n");
            StartMsfRpcListener.getBw().write("@verify{\"" + ip + "\":\"" + vulName + "\"}" + "\n");
            StartMsfRpcListener.getBw().flush();
            handResult(projectID, taskID, ip, vulName);
        } catch (IOException e) {
            e.printStackTrace();
            isRunningExploitVertify = false;
            return Constant.FAIL;
        }
        return Constant.SUCCESS;
    }

    //写入参数
    public int writeExploitVertifyParams(HttpServletRequest request) {
        int projectID = Integer.parseInt(request.getParameter("projectID"));
        int taskID = Integer.parseInt(request.getParameter("taskID"));
        String ip = request.getParameter("ip");
        String vulName = request.getParameter("vulName");
        //返回给前端的与返回之前保存在本地的一一对应
        ArrayList<ExploitVulParam> exploitVulParamArrayList = exploitVerifyParam.getParam();
        String param = "@verify_argsvalue_list{";
        try {
            for (int i = 0; i < exploitVulParamArrayList.size(); i++) {
                String paramName = exploitVulParamArrayList.get(i).getName();
                param += "\"" + paramName + "\"" + ":" + "\"" + request.getParameter(paramName) + "\"" + ",";
            }
            param += "\"payload\"" + ":" + "\"" + request.getParameter("payload") + "\"" + "}" + "\n";
            LogUtil.deepScanLog("projectID:" + projectID + "taskID:" + taskID + "ip:" + ip + "paramValue:" + param);
            hasReceivedParam = false;
            StartMsfRpcListener.getBw().write(param);
            StartMsfRpcListener.getBw().flush();
            updateVerifyState(projectID, taskID, ip, vulName, "verify");
            new ExploitScanThread(projectID, taskID, ip, vulName).start();
        } catch (IOException e) {
            e.printStackTrace();
            isRunningExploitVertify = false;
            hasReceivedParam = false;
            return Constant.FAIL;
        }
        return Constant.SUCCESS;
    }

    //处理exploit深度扫描的结果
    public synchronized void handResult(int projectID, int taskID, String ip, String vulName) {
        String result;
        try {
            while ((result = StartMsfRpcListener.getBr().readLine()) != null) {
                LogUtil.deepScanLog("explot:" + projectID + ":" + taskID + ":" + ip + ":" + result);
                if (result.indexOf("@error") == 0) {
                    updateVerifyState(projectID, taskID, ip, vulName, "fail");//更新漏洞验证状态为“验证失败”
                    isRunningExploitScan = false;
                    isRunningExploitVertify = false;
                    break;
                }
                if (result.indexOf("@exploit_name_list") == 0) {
                    String vulNames = result.substring(18);
                    saveExploitVulName(projectID, taskID, ip, vulNames);
                    isRunningExploitScan = false;
                    break;
                }
                if (result.contains("@verify_arguments_list") || result.contains("@verify_payloads_list")) {
                    if (result.indexOf("@verify_arguments_list") == 0) {
                        String arguments = result.substring(22);
                        saveExploitVulParam(projectID, taskID, ip, arguments, vulName);
                    }
                    if (result.indexOf("@verify_payloads_list") == 0) {
                        String payLoad = result.substring(21);
                        JSONArray payLoadArr = JSONArray.parseArray(payLoad);
                        saveExploitVerifyPayLoad(projectID, taskID, ip, payLoadArr);
                        break;
                    }
                }
                if (result.indexOf("@verify_result") == 0) {
                    String resultValue = result.substring(14);
                    saveExploitVulResult(projectID, taskID, ip, resultValue, vulName);
                    isRunningExploitVertify = false;
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            isRunningExploitScan = false;
            isRunningExploitVertify = false;
        }
    }

    //保存exploit验证漏洞对应的payload参数
    @Transactional(isolation = Isolation.SERIALIZABLE)
    public void saveExploitVerifyPayLoad(int projectID, int taskID, String ip, JSONArray payLoadArr) {
        String ipInfo = taskResultService.getIpInfo(projectID, taskID, ip);
        JSONObject jsonIpInfo = JSONObject.parseObject(ipInfo);
        if (jsonIpInfo.getJSONObject("exploit").getJSONArray("payloads_list") != null) {
            jsonIpInfo.getJSONObject("exploit").remove("payloads_list");
        }
        jsonIpInfo.getJSONObject("exploit").put("payloads_list", payLoadArr);
        taskResultService.saveDeepScanResult(taskID, projectID, ip, jsonIpInfo.toString());
    }

    //保存Exploit漏洞验证的结果
    @Transactional(isolation = Isolation.SERIALIZABLE)
    public void saveExploitVulResult(int projectID, int taskID, String ip, String resultValue, String vulName) {
        String ipJson = taskResultService.getIpInfo(projectID, taskID, ip);
        JSONObject ipInfo = JSONObject.parseObject(ipJson);
        JSONObject result = JSONObject.parseObject(resultValue);
        JSONArray vulList = ipInfo.getJSONObject("exploit").getJSONArray("vul_list");
        for (int i = 0; i < vulList.size(); i++) {
            if (vulList.getJSONObject(i).getString("script_name").equals(vulName)) {
                vulList.getJSONObject(i).put("priv_verify_state", "已验证");
                vulList.getJSONObject(i).getJSONObject("result").put("job_id", result.getString("job_id"));
                vulList.getJSONObject(i).getJSONObject("result").put("uuid", result.getString("uuid"));
                break;
            }
        }
        taskResultService.saveDeepScanResult(taskID, projectID, ip, ipInfo.toString());
    }

    //保存exploit漏洞验证漏洞对应的参数
    @Transactional(isolation = Isolation.SERIALIZABLE)
    public void saveExploitVulParam(int projectID, int taskID, String ip, String arguments, String vulName) {
        String ipJson = taskResultService.getIpInfo(projectID, taskID, ip);
        JSONObject ipInfo = JSONObject.parseObject(ipJson);
        JSONObject exploitParam = JSONObject.parseObject(arguments);
        JSONArray vulList = ipInfo.getJSONObject("exploit").getJSONArray("vul_list");
        for (int i = 0; i < vulList.size(); i++) {
            if (vulList.getJSONObject(i).getString("script_name").equals(vulName)) {
                vulList.getJSONObject(i).put("discription", exploitParam.getString("discription"));
                exploitParam.remove("discription");
                vulList.getJSONObject(i).remove("arguments_list");
                JSONArray vulParamArr = new JSONArray();
                addVulParams(vulList.getJSONObject(i), vulParamArr, exploitParam);
                break;
            }
        }
        taskResultService.saveDeepScanResult(taskID, projectID, ip, ipInfo.toString());
    }

    //保存exploit深度扫描返回的漏洞名称
    @Transactional(isolation = Isolation.SERIALIZABLE)
    public void saveExploitVulName(int projectID, int taskID, String ip, String vulNames) {
        Exploit exploit = new Exploit();
        ArrayList<String> payLoadList = new ArrayList<>();
        ArrayList<ExploitVul> exploitVulList = new ArrayList<>();

        JSONArray vulNameArray = JSONArray.parseArray(vulNames);
        for (int i = 0; i < vulNameArray.size(); i++) {
            ExploitVul exploitVul = new ExploitVul();
            ArrayList<ExploitVulParam> exploitVulParamList = new ArrayList<>();
            ExploitResult result = new ExploitResult();
            result.setJobId("");
            result.setUuiId("");
            exploitVul.setVulSource("Exploit");
            exploitVul.setScriptName(vulNameArray.getString(i));
            exploitVul.setVerifyState("未验证");
            exploitVul.setVulLevel("高危");
            exploitVul.setVulSolution("暂无");
            exploitVul.setDiscription("");
            exploitVul.setExploitVulParams(exploitVulParamList);
            exploitVul.setResult(result);
            exploitVulList.add(exploitVul);
        }
        exploit.setPayLoadList(payLoadList);
        exploit.setExploitVulList(exploitVulList);
        String ipInfo = taskResultService.getIpInfo(projectID, taskID, ip);//入库之前查找最新的,保持数据的同步
        JSONObject jsonIpInfo = JSONObject.parseObject(ipInfo);
        jsonIpInfo.put("exploit", JsonUtil.objectToJson(exploit));
        taskResultService.saveDeepScanResult(taskID, projectID, ip, jsonIpInfo.toString());
    }

    //更新漏洞验证的状态
    @Transactional(isolation = Isolation.SERIALIZABLE)
    public void updateVerifyState(int projectID, int taskID, String ip, String vulName, String state) {
        String ipJson = taskResultService.getIpInfo(projectID, taskID, ip);
        JSONObject ipInfo = JSONObject.parseObject(ipJson);
        if (ipInfo.getJSONObject("exploit") != null) {
            JSONArray vulList = ipInfo.getJSONObject("exploit").getJSONArray("vul_list");
            for (int i = 0; i < vulList.size(); i++) {
                if (vulList.getJSONObject(i).getString("script_name").equals(vulName)) {
                    if (state.equals("verify")) {
                        vulList.getJSONObject(i).put("priv_verify_state", "正在验证");
                    }
                    if (state.equals("fail")) {
                        vulList.getJSONObject(i).put("priv_verify_state", "验证失败");
                    }
                    break;
                }
            }
        }
        taskResultService.saveDeepScanResult(taskID, projectID, ip, ipInfo.toString());
    }

    //添加参数
    private void addVulParams(JSONObject exploitVul, JSONArray vulParamArr, JSONObject exploitParam) {
        for (String key : exploitParam.keySet()) {
            JSONObject paramValue = exploitParam.getJSONObject(key);
            addFields(vulParamArr, key, paramValue);
        }
        exploitVul.put("arguments_list", vulParamArr);
    }

    //添加参数的字段
    private void addFields(JSONArray vulParamArr, String name, JSONObject paramValue) {
        ExploitVulParam exploitVulParam = new ExploitVulParam();
        exploitVulParam.setName(name);
        if (paramValue.containsKey("advanced")) {
            exploitVulParam.setAdvanced(paramValue.getString("advanced"));
        } else {
            exploitVulParam.setAdvanced("");
        }
        if (paramValue.containsKey("default")) {
            exploitVulParam.setDefaultValue(paramValue.getString("default"));
        } else {
            exploitVulParam.setDefaultValue("");
        }
        if (paramValue.containsKey("desc")) {
            exploitVulParam.setDescription(paramValue.getString("desc"));
        } else {
            exploitVulParam.setDescription("");
        }
        if (paramValue.containsKey("evasion")) {
            exploitVulParam.setEvasion(paramValue.getString("evasion"));
        } else {
            exploitVulParam.setEvasion("");
        }
        if (paramValue.containsKey("required")) {
            exploitVulParam.setRequired(paramValue.getString("required"));
        } else {
            exploitVulParam.setRequired("");
        }
        if (paramValue.containsKey("type")) {
            exploitVulParam.setType(paramValue.getString("type"));
        } else {
            exploitVulParam.setType("");
        }
        vulParamArr.add(JsonUtil.objectToJson(exploitVulParam));
    }

    //获取exploit参数后不填写值，而验证另外一个，必须退出后台的死循环
    private void stopLastExploitVerify(int projectID, int taskID, String ip, String vulName) {
        try {
            StartMsfRpcListener.getBw().write("@stop_verify" + "\n");
            StartMsfRpcListener.getBw().flush();
            LogUtil.deepScanLog("exploit:" + projectID + ":" + taskID + ":" + ip + ":" + vulName + ":" + "@stop_verify" + "\n");
            Thread.sleep(1000);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            isRunningExploitVertify = false;
        }
    }

}
